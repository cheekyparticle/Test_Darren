#! /usr/bin/env python

'''
Given an output file from mapbuilder, plot a heat map of chi2 values
'''

import matplotlib, os
matplotlib.use(os.environ.get("MPL_BACKEND", "Agg"))


import numpy
import matplotlib.pyplot as pyplot
from matplotlib import cm
import matplotlib.colors as colorplot
import yoda

import optparse, os, sys
op = optparse.OptionParser(usage=__doc__)
op.add_option("--params", dest="WFILE", default=None, help="Path to a weight file to specify unequal chi2 weights of each bin in the fit (default: %default)")
op.add_option("--output", dest="OUTPUT", default="tunes", help="Prefix for outputs (default: %default)")

opts, args = op.parse_args()
if len(args) < 1:
    print "Argument missing... exiting\n\n"
    op.print_usage()
    sys.exit(1)
histos=yoda.readYODA(args[0])
params1 = args[1]
params2 = args[2]
print params1, params2

s = histos["/PROFLIKE/{0}{1}".format(params1, params2)]

x_array = numpy.array([])
y_array = numpy.array([])
'''
#coords = {}
coords = numpy.empty((1, 3))
for p in s.points:
    coord = numpy.zeros((1, 3))
    coord[0, 0] = p.x
    coord[0, 1] = p.y
    coord[0, 2] = p.z
    coords = numpy.append(coords, coord, axis=0)
coords[:, 2] = coords[:, 2]/numpy.amax(coords[:, 2])
'''
coords = {}

for p in s.points:
    x = p.x
    y = p.y
    z = p.z
    x_array = numpy.append(x_array, x)
    y_array = numpy.append(y_array, y)
    coords[(x, y)] = z

x_list = numpy.unique(x_array)
y_list = numpy.unique(y_array)
print x_list
print y_list

z = numpy.zeros((len(y_list), len(x_list)))
for i in range(len(x_list)):
    for j in range(len(y_list)):
	z[j, i] = coords[(x_list[i], y_list[j])]
	#if z[j, i] >=3000:
	    #z[j, i] = 3000

#z = numpy.log(z)
#z = z/numpy.amax(z)

from matplotlib.ticker import MaxNLocator
levels = MaxNLocator(nbins=15).tick_values(z.min(), z.max())

pyplot.figure(figsize=(7, 6))

im = pyplot.imshow(z,extent=(numpy.amin(x_list), numpy.amax(x_list), numpy.amin(y_list), numpy.amax(y_list)), aspect='auto',origin = 'lower', cmap=cm.jet)
pyplot.colorbar(cmap=cm.jet)
pyplot.xlabel('{0}'.format(params1))
pyplot.ylabel('{0}'.format(params2))

#cf = pyplot.contour(x_list,extent = (xmin, xmax, ymin, ymax),
#                  y_list, z, levels=levels,
#                  cmap=cm.jet)
#ax1.colorbar(cf, ax=ax1)
#ax1.set_title('contourf with levels')
pyplot.tight_layout()

pyplot.show()


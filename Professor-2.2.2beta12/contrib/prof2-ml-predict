#! /usr/bin/env python

"""\
%prog <param1,param2,param3> [<ipolfile>=ipol.dat]

%prog PARAMFILE [<ipolfile>=ipol.dat]

Write out interpolated histograms at a given parameter point.

"""

import optparse, os, sys
op = optparse.OptionParser(usage=__doc__)
op.add_option("--wfile", dest="WFILE", default=None, help="Path to a weight file, used to restrict output to a subset of histograms (default: %default)")
op.add_option("-o", dest="OUTPUT", default="mlprediction.yoda", help="output file name (default: %default)")
op.add_option("-v", "--debug", dest="DEBUG", action="store_true", default=False, help="Turn on some debug messages")
op.add_option("-q", "--quiet", dest="QUIET", action="store_true", default=False, help="Turn off messages")
opts, args = op.parse_args()


try:
    import yoda
except ImportError:
    "YODA not found, exiting"
    import sys
    sys.exit(1)



## Get mandatory arguments
if len(args) < 1:
    print "Argument missing... exiting\n\n"
    op.print_usage()
    sys.exit(1)
PARAMSTR = args[0]
IFILE = "ml.pkl"
if len(args) >= 2:
    IFILE = args[1]


import professor2 as prof
if not opts.QUIET:
    print prof.logo

## Parse the param point argument
PARAMS = None
if os.path.exists(PARAMSTR):
    with open(args[0]) as f:
        PARAMS = [float(l.strip().split()[-1]) for l in f if not l.startswith("#")]
else:
    print "No parameter file given or specified param file does not exist, exiting..."
    sys.exit(1)

## Read ML histos

import cPickle
MLHISTOS=cPickle.load(open(IFILE, 'rb'))

## Weight file parsing
if opts.WFILE:
    matchers = prof.read_pointmatchers(opts.WFILE)
    for hn in MLHISTOS.keys():
        if not any(m.match_path(hn) for m in matchers.keys()):
            del MLHISTOS[hn]
    if len(MLHISTOS.keys())==0:
        print "Nothing left after weight file parsing, exiting"
        sys.exit(0)


## Write out ipolhistos
ofile = opts.OUTPUT
scatters=[MLHISTOS[k].toDataHisto(PARAMS).toScatter2D() for k in sorted(MLHISTOS.keys())]
yoda.writeYODA(scatters, ofile)

if not opts.QUIET:
    print "Wrote output to", ofile
